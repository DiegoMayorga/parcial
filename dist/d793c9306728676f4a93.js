import"./style.css";import*as THREE from"three";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import*as dat from"dat.gui";const gui=new dat.GUI,canvas=document.querySelector("canvas.webgl"),scene=new THREE.Scene,geometry1=new THREE.BoxGeometry(20,1,1),material1=new THREE.MeshBasicMaterial({color:65280});material1.color=new THREE.Color(255);const cube1=new THREE.Mesh(geometry1,material1);cube1.position.set(0,18,0),scene.add(cube1);const geometry2=new THREE.BoxGeometry(20,1,1),material2=new THREE.MeshBasicMaterial({color:65280});material2.color=new THREE.Color(16776960);const cube2=new THREE.Mesh(geometry2,material2);cube2.position.set(0,-8,0),scene.add(cube2);const geometry3=new THREE.SphereGeometry(2,32,16),material3=new THREE.MeshBasicMaterial({color:16711680}),sphere=new THREE.Mesh(geometry3,material3);sphere.position.set(0,4,0),scene.add(sphere);const pointLight=new THREE.PointLight(16777215,.1);pointLight.position.x=2,pointLight.position.y=3,pointLight.position.z=4,scene.add(pointLight);const sizes={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",(()=>{sizes.width=window.innerWidth,sizes.height=window.innerHeight,camera.aspect=sizes.width/sizes.height,camera.updateProjectionMatrix(),renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const camera=new THREE.PerspectiveCamera(75,sizes.width/sizes.height,.1,100);camera.position.x=0,camera.position.y=5,camera.position.z=20,scene.add(camera);const renderer=new THREE.WebGLRenderer({canvas});renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2));const clock=new THREE.Clock,tick=()=>{clock.getElapsedTime(),renderer.render(scene,camera),window.requestAnimationFrame(tick)};tick();